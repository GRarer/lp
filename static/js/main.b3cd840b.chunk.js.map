{"version":3,"sources":["service/customization.ts","ui/common/CustomListIcon.tsx","ui/common/Uploader.tsx","service/persistence.ts","ui/menu/Menu.tsx","ui/selection/Selector.tsx","service/model.ts","service/url.ts","service/parse.ts","ui/App.tsx","ui/label/specialFormat.tsx","ui/label/Label.tsx","reportWebVitals.ts","index.tsx"],"names":["listIconOptionValues","listIconOptionSchema","reduce","prev","curr","S","union","literal","settingsSchema","recordOf","listIcon","imageDataUrl","optional","aString","CustomListIcon","props","icon","Album","Attachment","Book","Note","Uploader","fileInput","React","createRef","state","uniqueInputId","generateUUID","errorSnackbarMessage","undefined","currentInput","this","current","file","files","value","onUpload","setState","accept","style","display","id","type","ref","onInput","handleSubmit","htmlFor","Button","width","variant","component","text","Snackbar","open","autoHideDuration","onClose","dismissError","elevation","severity","Component","settingsLSKey","a","Promise","resolve","reject","reader","FileReader","addEventListener","result","Error","error","readAsDataURL","SettingsEditor","prevSettings","fileToDataUrl","then","url","catch","err","console","changeMenuError","marginBottom","Typography","src","maxWidth","maxHeight","color","onClick","removeImage","bind","handleImageUpload","FormControl","InputLabel","Select","labelId","onChange","event","changeListIcon","target","map","option","MenuItem","marginTop","onSave","MenuBar","showSettings","showHelp","AppBar","position","Toolbar","flexGrow","IconButton","edge","Dialog","DialogTitle","DialogContent","settings","onSaveSettings","message","href","Selector","search","item","toLowerCase","attributes","some","attribute","includes","rows","items","filter","itemMatchesSearch","ListItem","button","divider","dense","onSelect","ListItemIcon","ListItemText","primary","title","secondary","subtitle","uuid","fullWidth","FilledInput","endAdornment","InputAdornment","List","labelAttributeFormatSchema","labelAttributeSchema","name","format","labelDataSchema","arrayOf","itemUUIDSearchKey","openItemInNewTab","window","sessionStorage","setItem","jsonEncodeWith","URL","location","URLSearchParams","toString","tagSkip","tagScoreOutOf5","tagScoreOutOf10","extractColumnMetadata","colName","trimmedName","tag","replace","displayName","trim","readSpreadsheet","fileContents","workbook","XLSX","read","mainSheet","Sheets","SheetNames","data","utils","sheet_to_json","raw","blankrows","headers","header","Array","isArray","every","x","titleColName","subtitleColName","colMap","Map","row","column","get","push","makeItem","App","defaultSettings","localStorage","saveStoredSettings","arrayBuffer","buffer","currentStepControl","handleUpload","updateSettings","Container","formatScore","score","outOf","n","Number","parseFloat","isNaN","isInteger","stars","length","valueFormats","labelRow","TableRow","TableCell","onPerfEntry","Label","image","imageUrl","className","Table","size","TableBody","itemFromUrl","json","getItem","jsonDecodeWith","resultType","getItemFromUrlParam","initialSettings","saved","loadStoredSettings","ReactDOM","render","StrictMode","rel","document","getElementById","Function","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.b3cd840b.chunk.js","sourcesContent":["import { Schemas as S, Schema, DomainOf } from '@nprindle/augustus';\n\nexport const listIconOptionValues = [\n  'album' as const, 'attachment' as const, 'book' as const, 'label' as const, 'note' as const\n];\nconst listIconOptionSchema = listIconOptionValues.reduce(\n  (prev, curr) => S.union(prev, S.literal(curr)),\n  S.literal(listIconOptionValues[0])\n);\nexport type ListIconOption = DomainOf<typeof listIconOptionSchema>;\n\nexport type Settings = {\n  listIcon: ListIconOption;\n  imageDataUrl?: string;\n};\n\nexport const settingsSchema: Schema<Settings, Settings> = S.recordOf({\n  listIcon: listIconOptionSchema,\n  imageDataUrl: S.optional(S.aString)\n});\n\nexport const defaultSettings: Settings = {\n  listIcon: 'label',\n};\n","import {\n  Album, Attachment, Book, Label, Note,\n} from '@material-ui/icons';\nimport { ListIconOption } from '../../service/customization';\nimport React from 'react';\n\nexport function CustomListIcon(props: {icon: ListIconOption;}): JSX.Element {\n  switch (props.icon) {\n  case 'album': return <Album />;\n  case 'attachment': return <Attachment />;\n  case 'book': return <Book />;\n  case 'label': return <Label />;\n  case 'note': return <Note />;\n  }\n}\n","import React from 'react';\nimport { Button, Snackbar } from '@material-ui/core';\nimport { v4 as generateUUID } from 'uuid';\nimport MuiAlert from '@material-ui/lab/Alert';\n\ntype UploaderProps = {\n  onUpload: (file: File) => void;\n  text: string;\n  accept: string;\n};\n\ntype UploaderState = {\n  uniqueInputId: string;\n  errorSnackbarMessage: string | undefined;\n};\n\nexport default class Uploader extends React.Component<UploaderProps, UploaderState> {\n  fileInput: React.RefObject<HTMLInputElement>;\n\n  constructor(props: Readonly<UploaderProps>) {\n    super(props);\n    this.fileInput = React.createRef();\n\n    // we need an id to match labels with input buttons, and it must be unique to each uploader instance\n    this.state = { uniqueInputId: `file-input-${generateUUID()}`, errorSnackbarMessage: undefined };\n  }\n\n  private handleSubmit(): void {\n    const currentInput = this.fileInput.current;\n    if (currentInput === null) {\n      return;\n    }\n    const file = currentInput.files?.[0];\n    if (!file) {\n      this.setState({ errorSnackbarMessage: 'File not found!' });\n      return;\n    }\n    currentInput.value = '';\n    this.props.onUpload(file);\n  }\n\n  private dismissError(): void {\n    this.setState({ errorSnackbarMessage: undefined });\n  }\n\n  render(): JSX.Element {\n    return (\n      <>\n        <input\n          accept={this.props.accept}\n          style={{ display: 'none' }}\n          id={this.state.uniqueInputId}\n          type=\"file\"\n          ref={this.fileInput}\n          onInput={() => { this.handleSubmit(); }}\n        />\n        <label htmlFor={this.state.uniqueInputId}>\n          <Button\n            style={{ width: '100%' }}\n            variant=\"contained\"\n            component=\"span\"\n          >\n            {this.props.text}\n          </Button>\n        </label>\n        <Snackbar\n          open={!!this.state.errorSnackbarMessage}\n          autoHideDuration={6000}\n          onClose={()=>{ this.dismissError(); }}>\n          <MuiAlert elevation={6} variant=\"filled\" onClose={() => { this.dismissError(); }} severity=\"error\">\n            {this.state.errorSnackbarMessage}\n          </MuiAlert>\n        </Snackbar>\n      </>\n    );\n  }\n}\n","import { jsonDecodeWith, jsonEncodeWith } from '@nprindle/augustus';\nimport { Settings, settingsSchema } from './customization';\n\nconst settingsLSKey = 'customization_settings';\n\nexport function loadStoredSettings(): Settings | undefined {\n  const saved = window.localStorage.getItem(settingsLSKey);\n  if (!saved) {\n    return undefined;\n  }\n  const result = jsonDecodeWith(saved, settingsSchema);\n  if (result.resultType === 'success') {\n    return result.result;\n  } else {\n    console.error(result);\n    return undefined;\n  }\n}\n\nexport function saveStoredSettings(settings: Settings): void {\n  window.localStorage.setItem(settingsLSKey, jsonEncodeWith(settings, settingsSchema));\n}\n\nexport async function fileToDataUrl(file: File): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.addEventListener('load', () => {\n      const { result } = reader;\n      if (typeof result === 'string') {\n        resolve(result);\n      } else {\n        reject(new Error('file reader did not have expected result type'));\n      }\n    });\n\n    reader.addEventListener('error', () => {\n      reject(reader.error ?? new Error('unknown file reader error'));\n    });\n\n    reader.readAsDataURL(file);\n  });\n}\n","import {\n  AppBar, Button, Dialog, DialogContent, DialogTitle, FormControl, IconButton, Snackbar, Toolbar, Typography,\n} from '@material-ui/core';\nimport React from 'react';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport HelpIcon from '@material-ui/icons/Help';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { ListIconOption, listIconOptionValues, Settings } from '../../service/customization';\nimport { CustomListIcon } from '../common/CustomListIcon';\nimport Uploader from '../common/Uploader';\nimport { fileToDataUrl } from '../../service/persistence';\nimport MuiAlert from '@material-ui/lab/Alert';\n\ntype SettingsEditorProps = {\n  prevSettings: Settings;\n  onSave: (settings: Settings) => void;\n  changeMenuError: (message: string) => void;\n};\n\nclass SettingsEditor extends React.Component<SettingsEditorProps, Settings> {\n  constructor(props: Readonly<SettingsEditorProps>) {\n    super(props);\n    this.state = props.prevSettings;\n  }\n\n  private changeListIcon(value: ListIconOption): void {\n    this.setState({ listIcon: value });\n  }\n\n  private handleImageUpload(file: File): void {\n    fileToDataUrl(file).then((url) => {\n      this.setState({ imageDataUrl: url });\n    }).catch((err) => {\n      console.error(err);\n      this.props.changeMenuError('Error: could not read file');\n    });\n  }\n\n  private removeImage(): void {\n    this.setState({ imageDataUrl: undefined });\n  }\n\n  render(): JSX.Element {\n    return (\n      <div>\n        <div style={{ marginBottom: '5px' }}>\n          {\n\n            this.state.imageDataUrl\n              ? (\n                <>\n                  <Typography variant=\"h6\">Custom Image</Typography>\n                  <img src={this.state.imageDataUrl} style={{ maxWidth: '2in', maxHeight: '2in' }} />\n                  <Button\n                    color=\"secondary\"\n                    onClick={this.removeImage.bind(this)}\n                    style={{ display: 'block' }}\n                  >\n                    Remove Custom Image\n                  </Button>\n                </>\n              )\n              : (\n                <Uploader\n                  onUpload={this.handleImageUpload.bind(this)}\n                  text=\"Upload Label Image\"\n                  accept=\"image/*\"\n                />\n              )\n          }\n        </div>\n        <FormControl variant=\"filled\" style={{ width: '100%' }}>\n          <InputLabel id=\"icon-select-label\">List Icon</InputLabel>\n          <Select\n            labelId=\"icon-select-label\"\n            value={this.state.listIcon}\n            onChange={(event) => { this.changeListIcon(event.target.value as ListIconOption); }}\n          >\n            {listIconOptionValues.map((option) => (\n              <MenuItem value={option} key={option}><CustomListIcon icon={option} /></MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n        <div style={{ marginTop: '10px' }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ width: '100%' }}\n            onClick={() => { this.props.onSave(this.state); }}\n          >\n            Save and Close\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\ntype MenuProps = {\n  settings: Settings;\n  onSaveSettings: (settings: Settings) => void;\n};\n\ntype MenuBarState = {\n  showSettings: boolean;\n  showHelp: boolean;\n  errorSnackbarMessage: string | undefined;\n};\n\nexport class MenuBar extends React.Component<MenuProps, MenuBarState> {\n  constructor(props: Readonly<MenuProps>) {\n    super(props);\n\n    this.state = {\n      showSettings: false,\n      showHelp: false,\n      errorSnackbarMessage: undefined,\n    };\n  }\n\n  render(): JSX.Element {\n    return (\n      <>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n              LP Label Printer\n            </Typography>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"help\"\n              color=\"inherit\"\n              onClick={() => { this.setState({ showHelp: true }); }}\n            >\n              <HelpIcon/>\n            </IconButton>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"settings\"\n              color=\"inherit\"\n              onClick={() => { this.setState({ showSettings: true }); }}\n            >\n              <SettingsIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Dialog open={this.state.showSettings}>\n          <DialogTitle>Settings</DialogTitle>\n          <DialogContent>\n            <SettingsEditor\n              prevSettings={this.props.settings}\n              onSave={(settings) => {\n                this.setState({ showSettings: false });\n                this.props.onSaveSettings(settings);\n              }}\n              changeMenuError={(message)=>{ this.setState({ errorSnackbarMessage: message }); }}\n            />\n          </DialogContent>\n        </Dialog>\n        <Dialog open={this.state.showHelp} maxWidth=\"lg\">\n          <DialogTitle>About</DialogTitle>\n          <DialogContent style={{ width:'6in' }}>\n            <Typography variant=\"h6\">\n                How To Use\n            </Typography>\n            <ol>\n              <li>\n                  Record your items as an Excel spreadsheet (.XLSX file).\n              </li>\n              <li>Upload your spreadsheet.</li>\n              <li>Select one or more items that you want to print labels for. Each label will open in a new tab.</li>\n              <li>Print the label from your web browser.</li>\n            </ol>\n            <Typography variant=\"h6\">\n                How To Format Your Spreadsheet\n            </Typography>\n            <ul>\n              <li>\n                  If your file has multiple sheets, the data you want to print should be in the first sheet.\n              </li>\n              <li>\n                  The first row of your sheet should be the header row. This contains the names of the attributes stored\n                  in each column. Every other row should represent one item in your list.\n              </li>\n              <li>\n                  The first two columns are what will be shown in the list when you select which items to print.\n                  You may want these first two columns to be the title and subtitle, album name and artist name, etc.\n              </li>\n              <li>\n                  You can control how a column&aposs data will be displayed by adding keywords in brackets to the header\n                  of that column.\n                <ul>\n                  <li>\n                    <code>[label:skip]</code> - this column will not be shown on the labels.\n                  </li>\n                  <li>\n                    <code>[label:5_stars]</code> - this column will be shown as a score out of 5 stars.\n                      The values in this column should be numbers from 0 to 5 in increments of 0.5\n                      (e.g. &quot;0&quot;, &quot;2.5&quot;, and &quot;5&quot; are all valid values).\n                  </li>\n                  <li>\n                    <code>[label:10_stars]</code> - this column will be shown as a score out of 10 stars.\n                  </li>\n                </ul>\n                  For example, if column D stores &quot;id number&quot; values that you do not want to show on the\n                  labels, cell D1 should be set to: <code>id number [label:skip]</code>\n              </li>\n            </ul>\n            <Typography variant=\"h6\">\n                About\n            </Typography>\n            <p>Copyright 2021 Grace Rarer</p>\n            <p>\n              The source code is available under the MIT License\n              at <a href=\"https://github.com/grarer/lp\">https://github.com/grarer/lp</a>\n            </p>\n            <Button variant=\"contained\" onClick={()=>{ this.setState({ showHelp: false }); }}>\n                Close\n            </Button>\n          </DialogContent>\n        </Dialog>\n        <Snackbar\n          open={!!this.state.errorSnackbarMessage}\n          autoHideDuration={6000}\n          onClose={()=>{ this.setState({ errorSnackbarMessage: undefined }); }}>\n          <MuiAlert\n            elevation={6} variant=\"filled\"\n            onClose={()=>{ this.setState({ errorSnackbarMessage: undefined }); }} severity=\"error\"\n          >\n            {this.state.errorSnackbarMessage}\n          </MuiAlert>\n        </Snackbar>\n      </>\n    );\n  }\n}\n\n\n","import {\n  List, ListItem, ListItemIcon, ListItemText, Typography, InputAdornment, IconButton,\n} from '@material-ui/core';\nimport React from 'react';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { LabelData } from '../../service/model';\nimport { ListIconOption } from '../../service/customization';\nimport { CustomListIcon } from '../common/CustomListIcon';\n\ntype SelectorProps = {\n  items: LabelData[];\n  onSelect: (item: LabelData) => void;\n  listIcon: ListIconOption;\n};\n\ntype SelectorState = {\n  search: string;\n};\n\nexport class Selector extends React.Component<SelectorProps, SelectorState> {\n  constructor(props: Readonly<SelectorProps>) {\n    super(props);\n\n    this.state = {\n      search: '',\n    };\n  }\n\n  private itemMatchesSearch(item: LabelData): boolean {\n    const search = this.state.search.toLowerCase();\n    if (search === '') {\n      return true;\n    }\n    return item.attributes.some(attribute => attribute.value.toLowerCase().includes(search));\n  }\n\n  render(): JSX.Element {\n    const rows = this.props.items.filter((item) => this.itemMatchesSearch(item)).map((item) => (\n      <ListItem\n        button\n        divider\n        dense\n        onClick={() => { this.props.onSelect(item); }}\n        key={item.uuid}\n      >\n        <ListItemIcon>\n          <CustomListIcon icon={this.props.listIcon} />\n        </ListItemIcon>\n        <ListItemText\n          primary={item.title}\n          secondary={item.subtitle}\n        />\n      </ListItem>\n    ));\n\n    return (\n      <div>\n        <Typography variant=\"h5\" style={{ marginBottom: '5px' }}>\n          Select a label to print\n        </Typography>\n        <FormControl fullWidth variant=\"filled\">\n          <InputLabel htmlFor=\"search-control\">Search</InputLabel>\n          <FilledInput\n            id=\"search-control\"\n            value={this.state.search}\n            onChange={(event) => {\n              this.setState({ search: event.target.value });\n            }}\n            endAdornment={(\n              <InputAdornment position=\"end\">\n                <IconButton onClick={() => { this.setState({ search: '' }); }}><ClearIcon /></IconButton>\n              </InputAdornment>\n            )}\n          />\n        </FormControl>\n        <List>\n          {rows}\n        </List>\n      </div>\n    );\n  }\n}\n","import { Schemas as S, Schema } from '@nprindle/augustus';\n\nexport type LabelAttributeFormat = 'text' | 'scoreOutOf5' | 'scoreOutOf10';\n\nconst labelAttributeFormatSchema: Schema<LabelAttributeFormat, LabelAttributeFormat> = S.union(\n  S.literal('text' as const), S.union(S.literal('scoreOutOf5' as const), S.literal('scoreOutOf10' as const))\n);\n\nexport type LabelAttribute = {\n  name: string;\n  value: string;\n  format: LabelAttributeFormat;\n  uuid: string;\n};\n\nconst labelAttributeSchema = S.recordOf({\n  name: S.aString,\n  value: S.aString,\n  format: labelAttributeFormatSchema,\n  uuid: S.aString,\n});\n\nexport type LabelData = {\n  title: string;\n  subtitle?: string;\n  attributes: LabelAttribute[];\n  uuid: string;\n};\n\nexport const labelDataSchema: Schema<LabelData, LabelData> = S.recordOf({\n  title: S.aString,\n  subtitle: S.optional(S.aString),\n  attributes: S.arrayOf(labelAttributeSchema),\n  uuid: S.aString\n});\n","import { LabelData, labelDataSchema, } from './model';\nimport { jsonEncodeWith, jsonDecodeWith } from '@nprindle/augustus';\n\nconst itemUUIDSearchKey = 'item';\n\nexport function getItemFromUrlParam(): LabelData | undefined {\n  const urlSearch = new URLSearchParams(window.location.search);\n  const uuid = urlSearch.get(itemUUIDSearchKey);\n  if (!uuid) {\n    return undefined;\n  }\n  const json = window.sessionStorage.getItem(uuid);\n  if (json) {\n    const result = jsonDecodeWith(json, labelDataSchema);\n    if (result.resultType === 'success') {\n      return result.result;\n    } else {\n      console.error(result); // TODO show error to user\n      return undefined;\n    }\n  }\n  return undefined;\n}\n\nexport function openItemInNewTab(item: LabelData): void {\n  const uuid = item.uuid;\n  // save label data to session storage so it can be accessed from new tab\n  window.sessionStorage.setItem(uuid, jsonEncodeWith(item, labelDataSchema));\n  // open new tab to show label\n  const url = new URL(window.location.href);\n  url.search = (new URLSearchParams({ [itemUUIDSearchKey]: uuid })).toString();\n  window.open(url.toString(), '_blank');\n}\n","import { v4 as generateUUID } from 'uuid';\nimport XLSX from 'xlsx';\nimport { LabelAttribute, LabelAttributeFormat, LabelData } from './model';\n\nconst tagSkip = '[label:skip]'; // including this in column headers tells us not to print these columns\nconst tagScoreOutOf5 = '[label:5_stars]';\nconst tagScoreOutOf10 = '[label:10_stars]';\n\n\ntype SheetRow = {[column: string]: string | undefined;};\ntype ColumnMetadata = {displayName: string; format: LabelAttributeFormat | 'skip';};\n\n// extract format tags from column names\nfunction extractColumnMetadata(colName: string): ColumnMetadata {\n  let format: LabelAttributeFormat | 'skip' = 'text';\n  if (colName.includes(tagScoreOutOf5)) {\n    format = 'scoreOutOf5';\n  }\n  if (colName.includes(tagScoreOutOf10)) {\n    format = 'scoreOutOf10';\n  }\n  if (colName.includes(tagSkip)) {\n    format = 'skip';\n  }\n\n  let trimmedName = colName;\n  for (const tag of [tagSkip, tagScoreOutOf5, tagScoreOutOf10]) {\n    trimmedName = trimmedName.replace(tag, '');\n  }\n  trimmedName = trimmedName.trim();\n\n  return { displayName: trimmedName, format };\n}\n\nfunction makeItem(\n  row: SheetRow,\n  colMap: Map<string, ColumnMetadata>,\n  titleColName: string,\n  subtitleColName: string | undefined\n): LabelData {\n  const attributes: LabelAttribute[] = [];\n\n  for (const colName in row) {\n    const column = colMap.get(colName);\n    const value = row[colName]?.trim();\n    if (value && column) {\n      if (column.format !== 'skip') {\n        attributes.push({\n          uuid: generateUUID(),\n          value: value,\n          name: column.displayName,\n          format: column.format\n        });\n      }\n    }\n  }\n\n  return {\n    title: row[titleColName] ?? '(unknown)',\n    subtitle: subtitleColName ? row[subtitleColName] : undefined,\n    uuid: generateUUID(),\n    attributes\n  };\n}\n\nexport function readSpreadsheet(fileContents: ArrayBuffer): LabelData[] {\n  // extract data rows from excel file\n  const workbook = XLSX.read(fileContents, { type: 'array' });\n  const mainSheet = workbook.Sheets[workbook.SheetNames[0]];\n\n  const data: SheetRow[] = XLSX.utils.sheet_to_json(mainSheet, { raw: false, blankrows: false });\n  // parse rows based on expected column names\n  const headers = XLSX.utils.sheet_to_json(mainSheet, { header: 1 })[0];\n  if (!Array.isArray(headers) || !headers.every((x): x is string => typeof x === 'string')) {\n    throw 'Error: Unexpected parse result';\n  }\n  const titleColName: string | undefined = headers[0];\n  const subtitleColName: string | undefined = headers[1];\n  if (typeof titleColName === 'undefined') {\n    throw 'Error: Spreadsheet is missing first column';\n  }\n\n  const colMap: Map<string, ColumnMetadata> = new Map(headers.map(header => [header, extractColumnMetadata(header)]));\n\n  return data.map(row => makeItem(row, colMap, titleColName, subtitleColName));\n}\n","import React from 'react';\nimport { Container, Snackbar } from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { MenuBar } from './menu/Menu';\nimport Uploader from './common/Uploader';\nimport { LabelData } from '../service/model';\nimport { Selector } from './selection/Selector';\nimport { openItemInNewTab } from '../service/url';\nimport { Settings } from '../service/customization';\nimport { saveStoredSettings } from '../service/persistence';\nimport { readSpreadsheet } from '../service/parse';\n\ntype AppState = {\n  items?: LabelData[];\n  settings: Settings;\n  errorSnackbarMessage: string | undefined;\n};\n\ntype AppProps = {\n  defaultSettings: Settings;\n};\n\nexport default class App extends React.Component<AppProps, AppState> {\n  constructor(props: Readonly<AppProps>) {\n    super(props);\n\n    this.state = {\n      settings: props.defaultSettings,\n      items: undefined,\n      errorSnackbarMessage: undefined\n    };\n  }\n\n  private updateSettings(settings: Settings): void {\n    this.setState({ settings });\n    saveStoredSettings(settings);\n  }\n\n  private handleUpload(file: File): void {\n    file.arrayBuffer().then((buffer) => {\n      this.setState({ items: readSpreadsheet(buffer) });\n    }).catch((err) => {\n      console.error(err);\n      const message = typeof err === 'string' ? err : 'Error: Unable to process file';\n      this.setState({ errorSnackbarMessage: message });\n    });\n  }\n\n  private dismissError(): void {\n    this.setState({ errorSnackbarMessage: undefined });\n  }\n\n  render(): JSX.Element {\n    const items = this.state.items;\n    const currentStepControl = items\n      ?\n      <Selector items={items} onSelect={openItemInNewTab} listIcon={this.state.settings.listIcon} />\n      :\n      <Uploader\n        onUpload={this.handleUpload.bind(this)}\n        accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        text=\"Upload Spreadsheet\"\n      />;\n\n    return (\n      <div>\n        <MenuBar settings={this.state.settings} onSaveSettings={this.updateSettings.bind(this)} />\n        <Container maxWidth=\"sm\">\n          <div style={{ marginTop: '10px' }}>\n            {currentStepControl}\n          </div>\n        </Container>\n        <Snackbar\n          open={!!this.state.errorSnackbarMessage}\n          autoHideDuration={6000}\n          onClose={()=>{ this.dismissError(); }}>\n          <MuiAlert elevation={6} variant=\"filled\" onClose={() => { this.dismissError(); }} severity=\"error\">\n            {this.state.errorSnackbarMessage}\n          </MuiAlert>\n        </Snackbar>\n      </div>\n    );\n  }\n}\n","import StarIcon from '@material-ui/icons/Star';\nimport StarHalfIcon from '@material-ui/icons/StarHalf';\nimport StarOutlineIcon from '@material-ui/icons/StarOutline';\nimport React from 'react';\n\nexport function formatScore(score: string, outOf: number): JSX.Element {\n  let n = Number.parseFloat(score);\n  if (\n    Number.isNaN(n)\n        || !Number.isInteger(n * 2)\n        || (n < 0)\n        || (n > outOf)\n  ) {\n    // fall back to just displaying the value if it isn't a valid score in the range\n    return <>{score}</>;\n  }\n\n  const stars: JSX.Element[] = [];\n  while (n >= 1) {\n    stars.push(\n      <StarIcon />,\n    );\n    n -= 1;\n  }\n  if (n === 0.5) {\n    stars.push(\n      <StarHalfIcon />,\n    );\n  }\n  while (stars.length < outOf) {\n    stars.push(\n      <StarOutlineIcon />,\n    );\n  }\n  return (\n    <>{stars}</>\n  );\n}\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { LabelAttribute, LabelData } from '../../service/model';\nimport './Label.css';\nimport { formatScore } from './specialFormat';\n\nconst valueFormats = {\n  'text': (value: string) => value,\n  'scoreOutOf5': (value: string) => formatScore(value, 5),\n  'scoreOutOf10': (value: string) => formatScore(value, 10),\n};\n\nfunction labelRow(props: LabelAttribute): JSX.Element {\n  return (\n    <TableRow key={props.uuid}>\n      <TableCell>{props.name}</TableCell>\n      <TableCell>{valueFormats[props.format](props.value)}</TableCell>\n    </TableRow>\n  );\n}\n\nexport class Label extends React.Component<{data: LabelData; imageUrl?: string;}> {\n  render(): JSX.Element {\n    const image: JSX.Element | undefined = this.props.imageUrl\n      ? <img src={this.props.imageUrl} style={{ maxWidth: '2.5in' }} />\n      : undefined;\n\n    return (\n      <div className=\"label\">\n        {image}\n        <Table size=\"small\">\n          <TableBody>\n            {this.props.data.attributes.map(labelRow)}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nexport default function reportWebVitals(onPerfEntry?: ReportHandler): void {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport { getItemFromUrlParam } from './service/url';\nimport { LabelData } from './service/model';\nimport { Label } from './ui/label/Label';\nimport { loadStoredSettings } from './service/persistence';\nimport { defaultSettings } from './service/customization';\n\n// check whether current tab is a label opened from another tab\nconst itemFromUrl: LabelData | undefined = getItemFromUrlParam();\n\n// load settings from local storage\nconst initialSettings = loadStoredSettings() ?? defaultSettings;\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n    {\n      itemFromUrl\n        // display label page instead of app if an item was specified in url params\n        ? <Label data={itemFromUrl} imageUrl={initialSettings.imageDataUrl} />\n        // otherwise display the main app\n        : <App defaultSettings={initialSettings} />\n    }\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}